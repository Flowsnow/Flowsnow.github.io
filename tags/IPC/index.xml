<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IPC on Suncle&#39;s Blog</title>
    <link>https://suncle.me/tags/IPC/</link>
    <description>Recent content in IPC on Suncle&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Dec 2017 14:01:05 +0000</lastBuildDate>
    
	<atom:link href="https://suncle.me/tags/IPC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>unix domain socket</title>
      <link>https://suncle.me/2017/12/11/unix-domain-socket/</link>
      <pubDate>Mon, 11 Dec 2017 14:01:05 +0000</pubDate>
      
      <guid>https://suncle.me/2017/12/11/unix-domain-socket/</guid>
      <description>&lt;h1 id=&#34;unix-domain-socket&#34;&gt;unix domain socket&lt;/h1&gt;
&lt;p&gt;unix domain socket 是在socket架构上发展起来的用于同一台主机的进程间通讯（IPC: Inter-Process Communication），它不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。UNIX Domain Socket有SOCK_DGRAM或SOCK_STREAM两种工作模式，类似于UDP和TCP，但是面向消息的UNIX Domain Socket也是可靠的，消息既不会丢失也不会顺序错乱。&lt;/p&gt;
&lt;p&gt;UNIX Domain Socket可用于两个没有亲缘关系的进程，是全双工的，是目前使用最广泛的IPC机制，比如X Window服务器和GUI程序之间就是通过UNIX Domain Socket通讯的。&lt;/p&gt;
&lt;p&gt;UNIX Domain socket与网络socket类似，可以与网络socket对比应用。&lt;/p&gt;
&lt;p&gt;上述二者编程的不同如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;address family为AF_UNIX&lt;/li&gt;
&lt;li&gt;因为应用于IPC，所以UNIXDomain socket不需要IP和端口，取而代之的是文件路径来表示“网络地址”。这点体现在下面两个方面。&lt;/li&gt;
&lt;li&gt;地址格式不同，UNIXDomain socket用结构体sockaddr_un表示，是一个socket类型的文件在文件系统中的路径，这个socket文件由bind()调用创建，如果调用bind()时该文件已存在，则bind()错误返回。&lt;/li&gt;
&lt;li&gt;UNIX Domain Socket客户端一般要显式调用bind函数，而不象网络socket一样依赖系统自动分配的地址。客户端bind的socket文件名可以包含客户端的pid，这样服务器就可以区分不同的客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面用python代码演示uds的使用&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>